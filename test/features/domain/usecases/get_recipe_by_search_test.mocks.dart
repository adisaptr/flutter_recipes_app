// Mocks generated by Mockito 5.0.16 from annotations
// in recipes_app/test/features/domain/usecases/get_recipe_by_search_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:recipes_app/core/error/failure.dart' as _i5;
import 'package:recipes_app/features/domain/entities/recipe.dart' as _i6;
import 'package:recipes_app/features/domain/entities/recipe_article.dart'
    as _i9;
import 'package:recipes_app/features/domain/entities/recipe_article_by_category.dart'
    as _i12;
import 'package:recipes_app/features/domain/entities/recipe_article_category.dart'
    as _i11;
import 'package:recipes_app/features/domain/entities/recipe_article_detail.dart'
    as _i13;
import 'package:recipes_app/features/domain/entities/recipe_by_search.dart'
    as _i8;
import 'package:recipes_app/features/domain/entities/recipe_category.dart'
    as _i7;
import 'package:recipes_app/features/domain/entities/recipe_detail.dart'
    as _i10;
import 'package:recipes_app/features/domain/repositories/recipe_repository.dart'
    as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [RecipeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipeRepository extends _i1.Mock implements _i3.RecipeRepository {
  MockRecipeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Recipe>>> getRecipe() =>
      (super.noSuchMethod(Invocation.method(#getRecipe, []),
          returnValue: Future<_i2.Either<_i5.Failure, List<_i6.Recipe>>>.value(
              _FakeEither_0<_i5.Failure, List<_i6.Recipe>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.Recipe>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.RecipeCategory>>>
      getRecipeCategory() => (super.noSuchMethod(
              Invocation.method(#getRecipeCategory, []),
              returnValue: Future<
                      _i2.Either<_i5.Failure, List<_i7.RecipeCategory>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i7.RecipeCategory>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i7.RecipeCategory>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Recipe>>> getRecipeByCategory(
          String? key) =>
      (super.noSuchMethod(Invocation.method(#getRecipeByCategory, [key]),
          returnValue: Future<_i2.Either<_i5.Failure, List<_i6.Recipe>>>.value(
              _FakeEither_0<_i5.Failure, List<_i6.Recipe>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.Recipe>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.RecipeBySearch>>>
      getRecipeBySearch(String? key) => (super.noSuchMethod(
              Invocation.method(#getRecipeBySearch, [key]),
              returnValue: Future<
                      _i2.Either<_i5.Failure, List<_i8.RecipeBySearch>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i8.RecipeBySearch>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i8.RecipeBySearch>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i9.RecipeArticle>>>
      getRecipeArticle() => (super.noSuchMethod(
          Invocation.method(#getRecipeArticle, []),
          returnValue:
              Future<_i2.Either<_i5.Failure, List<_i9.RecipeArticle>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i9.RecipeArticle>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i9.RecipeArticle>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.RecipeDetail>> getRecipeDetail(
          String? key) =>
      (super.noSuchMethod(Invocation.method(#getRecipeDetail, [key]),
          returnValue: Future<_i2.Either<_i5.Failure, _i10.RecipeDetail>>.value(
              _FakeEither_0<_i5.Failure, _i10.RecipeDetail>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i10.RecipeDetail>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i11.RecipeArticleCategory>>>
      getRecipeArticleCategory() => (super.noSuchMethod(
          Invocation.method(#getRecipeArticleCategory, []),
          returnValue:
              Future<_i2.Either<_i5.Failure, List<_i11.RecipeArticleCategory>>>.value(
                  _FakeEither_0<_i5.Failure,
                      List<_i11.RecipeArticleCategory>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i11.RecipeArticleCategory>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i12.RecipeArticleByCategory>>>
      getRecipeArticleByCategory(String? key) => (super.noSuchMethod(
          Invocation.method(#getRecipeArticleByCategory, [key]),
          returnValue: Future<_i2.Either<_i5.Failure, List<_i12.RecipeArticleByCategory>>>.value(
              _FakeEither_0<_i5.Failure,
                  List<_i12.RecipeArticleByCategory>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i12.RecipeArticleByCategory>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i13.RecipeArticleDetail>>
      getRecipeArticleDetail(String? key) => (super.noSuchMethod(
              Invocation.method(#getRecipeArticleDetail, [key]),
              returnValue: Future<
                      _i2.Either<_i5.Failure, _i13.RecipeArticleDetail>>.value(
                  _FakeEither_0<_i5.Failure, _i13.RecipeArticleDetail>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i13.RecipeArticleDetail>>);
  @override
  String toString() => super.toString();
}
